binom.test(1,50,0.10)
binom.test(1,50,0.10,'g')
binom.test(1,50,0.10,'l')
install.packages(statsr)
install.packages("statsr")
install.packages("BiocManager")
BiocManager::install("limma")
install.packages("ggplot2")
thales <- read.csv("~/Documents/thales.csv", dec=",")
View(thales)
GSE102008_non.normalized <- read.delim("~/Documents/estag/GSE102008_non-normalized.txt")
View(GSE102008_non.normalized)
levels(as.factor(GSE102008_non.normalized$SYMBOL))
GSE102008_non.normalized$ILMN_GENE["ILMN_1343291"]
head(GSE102008_non.normalized$ILMN_GENE)
head(GSE102008_non.normalized$PROBE_ID)
GSE102008_non.normalized$PROBE_ID["ILMN_1343291"]
GSE102008_non.normalized[1,1:20]
View(GSE102008_non.normalized)
sample_data_t <- read.delim("~/Documents/estag/sample_data_t.txt", header=FALSE)
View(sample_data_t)
sample_data<-t(sample_data_t)
View(sample_data)
sample_data_final<-sample_data[,1:22]
View(sample_data_final)
sample_data_final<-cbind(sample_data_final,sample_data$V30)
sample_data_final<-cbind(sample_data_final,sample_data[,30])
View(sample_data_final)
sample_data_final[,3:7]<-NULL
sample_data_final<-sample_data_final[,-c(3:7)]
View(sample_data_final)
sample_data_final<-sample_data_final[,-c(3:4)]
sample_data_final<-sample_data_final[,-4]
write.csv(sample_data_final,file="sample_data.csv", row.names = FALSE, col.names = FALSE)
library(limma)
sample_data <- read.csv("~/Documents/estag/sample_data.csv")
View(sample_data)
german <- read.csv("~/Downloads/ML in R data/german.data", sep="", header = FALSE)
#vars coding at: https://archive.ics.uci.edu/ml/datasets/Statlog+%28German+Credit+Data%29
colnames(german)<-c("account_status","duration(m)","cred_hist", "purpose","credit_amount","saving_acc","employment_since","install_percent_income","personal_status_sex","other_debs","residence_since","property","age","other_plans","housing","n_of_credits","Job","dependents","phone","foreign")
head(german)
german[,21]<-NULL
#vars coding at: https://archive.ics.uci.edu/ml/datasets/Statlog+%28German+Credit+Data%29
colnames(german)<-c("account_status","duration(m)","cred_hist", "purpose","credit_amount","saving_acc","employment_since","install_percent_income","personal_status_sex","other_debs","residence_since","property","age","other_plans","housing","n_of_credits","Job","dependents","phone","foreign")
head(german)
to.factors <- function(df, variables){ for (variable in variables){ df[[variable]] <- as.factor(df[[variable]]) } return(df) }
to.factors <- function(german, variables){ for (variable in variables){ german[[variable]] <- as.factor(german[[variable]]) } return(german) }
tofactors <- function(german, variables){ for (variable in variables){ german[[variable]] <- as.factor(german[[variable]]) } return(german) }
to.factors <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return(df) }
return(df) }
return(df) }
scale.features <- function(df, variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]], center=T, scale=T)
}
return(df) }
colnames(german)
head(german)
numeric.vars<-c("duration(m)","credit_amount","install_percent_income","residence_since","age","n_of_credits","dependents")
german<-scale.features(german, numeric.vars)
??scale.features
categorical.vars<-setdiff(colnames(german),numeric.vars)
#transformar as variaveis categÃ³ricas em factors
german<-to.factors(df=german, variables = categorical.vars)
# split data into training and test datasets in 60:40 ratio
indexes <- sample(1:nrow(credit.df), size=0.6*nrow(credit.df))
# split data into training and test datasets in 60:40 ratio
indexes <- sample(1:nrow(german), size=0.6*nrow(german))
test.data <- credit.df[-indexes,]
train.data <- german[indexes,]
test.data <- german[-indexes,]
library(caret)
install.packages("caret")
library(randomForest)
install.packages(randomForest)
install.packages("randomForest")
#R machine learning by example - Bali Sarkar - 2016
#Chap. 6- Credit Risk Detection and prediction - Predictive analytics
library(randomForest)
library(caret)
sessionInfo()
rfFuncs
View(rfFuncs)
#Set the FS function
#backwards selection (aka recursive feature elimination)
run.FS<-function(num.iters=20, feature.vars, class.var){
set.seed(10)
variable.sizes<-1:10
control<-rfeControl(functions = rfFuncs, #rfFuncs eh uma lista de 6 funcoes
method="cv",
verbose = FALSE,returnResamp = "all",
number = num.iters)
results.rfe <-rfe(x=feature.vars, y=class.var, sizes= variable.sizes,
rfeControl=control)
}
#Set the FS function
#backwards selection (aka recursive feature elimination)
run.FS<-function(num.iters=20, feature.vars, class.var){
set.seed(10)
variable.sizes<-1:10
control<-rfeControl(functions = rfFuncs, #rfFuncs eh uma lista de 6 funcoes
method="cv",
verbose = FALSE,returnResamp = "all",
number = num.iters)
results.rfe <-rfe(x=feature.vars, y=class.var, sizes= variable.sizes,
rfeControl=control)
}
##Rodar a partir daqui pq demora
rfe.results<-run.FS(feature.vars = train.data[,-1], class.var = train.data[,1])
install.packages("e1071")
library(e1071)
##Rodar a partir daqui pq demora
rfe.results<-run.FS(feature.vars = train.data[,-1], class.var = train.data[,1])
rfe.results
install.packages("kernlab")
library(kernlab)
##Leitura a partir do arquivo
GSE102008_counts_vst_norm <- read.delim("~/Documents/estag/GSE102008_counts_vst_norm.txt")
annotation_non_normalize <- read.csv("~/Documents/estag/annotation_non_normalize.csv", sep="")
View(annotation_non_normalize)
genes<-levels(annotation_non_normalize$ENTREZ_GENE_ID)
library(dplyr)
genes<-distinct(annotation_non_normalize$ENTREZ_GENE_ID)
genes<-distinct(as.character(annotation_non_normalize$ENTREZ_GENE_ID))
genes<-distinct(as.character(annotation_non_normalize[c("ENTREZ_GENE_ID"),]))
genes<-distinct(annotation_non_normalize[c("ENTREZ_GENE_ID"),])
View(annotation_non_normalize)
View(genes)
genes<-distinct(annotation_non_normalize[,c("ENTREZ_GENE_ID")])
genes<-distinct(as.data.frame(annotation_non_normalize[,c("ENTREZ_GENE_ID")]))
View(genes)
genes<-distinct(as.data.frame("Entrez",annotation_non_normalize[,c("ENTREZ_GENE_ID")]))
genes<-distinct(as.data.frame("Entrez"=annotation_non_normalize[,c("ENTREZ_GENE_ID")]))
genes<-distinct(as.data.frame(annotation_non_normalize[,c("ENTREZ_GENE_ID")]), col.names="EntrezID")
View(genes)
genes<-distinct(as.data.frame(annotation_non_normalize[,c("ENTREZ_GENE_ID")]))
annotation<-annotation_non_normalize[(annotation_non_normalize$ENTREZ_GENE_ID,genes$`annotation_non_normalize[, c("ENTREZ_GENE_ID")]`)]
colnames(genes)<-"EntrezID"
annotation<-annotation_non_normalize[(annotation_non_normalize$ENTREZ_GENE_ID,genes$EntrezID)]
annotation<-annotation_non_normalize[(annotation_non_normalize$ENTREZ_GENE_ID %in% genes$EntrezID)]
annotation<-annotation_non_normalize[(annotation_non_normalize$ENTREZ_GENE_ID %in% genes$EntrezID)]
annotation<-annotation_non_normalize[(annotation_non_normalize$ENTREZ_GENE_ID %in% genes$EntrezID),]
nrow(annotation_non_normalize)==nrow(annotation)
###Fazer a definicao do valor comum para as multiplas sonadas para um mesmo gene
GSE102008_counts_vst_norm$ENTREZ<-annotation$ENTREZ_GENE_ID[match(GSE102008_counts_vst_norm$ID_REF, annotation$PROBE_ID)]
View(GSE102008_counts_vst_norm)
head(GSE102008_counts_vst_norm[1:5,ncol(GSE102008_counts_vst_norm)])
GSE102008_counts_vst_norm %>%
group_by(ENTREZ) %>%
summarise(c(2:(ncol(GSE102008_counts_vst_norm)-1)))
##Leitura a partir do arquivo
GSE102008_counts_vst_norm <- read.delim("~/Documents/estag/GSE102008_counts_vst_norm.txt")
###Fazer a definicao do valor comum para as multiplas sonadas para um mesmo gene
#Passar as Entrez para o df com as contagens
GSE102008_counts_vst_norm$ENTREZ<-annotation$ENTREZ_GENE_ID[match(GSE102008_counts_vst_norm$ID_REF, annotation$PROBE_ID)]
counts_grouped<-GSE102008_counts_vst_norm
counts_grouped %>%
group_by(ENTREZ) %>%
summarise_each(funs(mean=mean(., na.rm=TRUE)))
rm(annotation)
rm(annotation_non_normalize)
###Fazer a definicao do valor comum para as multiplas sonadas para um mesmo gene
#Passar as Entrez para o df com as contagens
#GSE102008_counts_vst_norm$ENTREZ<-annotation$ENTREZ_GENE_ID[match(GSE102008_counts_vst_norm$ID_REF, annotation$PROBE_ID)]
#counts_grouped<-GSE102008_counts_vst_norm
#counts_grouped %>%
#  group_by(ENTREZ) %>%
#  summarise_each(funs(mean=mean(., na.rm=TRUE)))
rm(GSE102008_counts_vst_norm)
warnings()
View(counts_grouped)
###Fazer a definicao do valor comum para as multiplas sonadas para um mesmo gene
#Passar as Entrez para o df com as contagens
#GSE102008_counts_vst_norm$ENTREZ<-annotation$ENTREZ_GENE_ID[match(GSE102008_counts_vst_norm$ID_REF, annotation$PROBE_ID)]
#counts_grouped<-GSE102008_counts_vst_norm
tibble<-counts_grouped %>%
group_by(ENTREZ) %>%
summarise_each(funs(mean=mean(., na.rm=TRUE)))
View(tibble)
counts_vst_per_entrez <- read.csv("~/Documents/estag/counts_vst_per_entrez.csv", sep="")
View(counts_vst_per_entrez)
library(caret)
entrez<-counts_vst_per_entrez$ENTREZ
counts_vst_per_entrez$ENTREZ<-NULL
near_result<nearZeroVar(counts_vst_per_entrez,names = TRUE,saveMetrics = TRUE)
near_result<-nearZeroVar(counts_vst_per_entrez,names = TRUE,saveMetrics = TRUE)
##Leitura a partir do arquivo
GSE102008_counts_vst_norm <- read.delim("~/Documents/estag/GSE102008_counts_vst_norm.txt")
annotation_non_normalize <- read.csv("~/Documents/estag/annotation_non_normalize.csv", sep="")
ex109<-annotation_non_normalize[annotation_non_normalize$ENTREZ_GENE_ID==109,]
data<-merge(x=GSE102008_counts_vst_norm, y=annotation_non_normalize, by.x = "ID_REF","ENTREZ_GENE_ID")
View(data)
data<-merge(x=GSE102008_counts_vst_norm, y=ex109, by.x = "ID_REF","PROBE_ID")
View(data)
ex109<-annotation_non_normalize[annotation_non_normalize$ENTREZ_GENE_ID=="1313",]
data<-merge(x=GSE102008_counts_vst_norm, y=ex109, by.x = "ID_REF","PROBE_ID")
ex109<-annotation_non_normalize[annotation_non_normalize$ENTREZ_GENE_ID=="6342",]
data<-merge(x=GSE102008_counts_vst_norm, y=ex109, by.x = "ID_REF","PROBE_ID")
View(data)
mean(data[,2])
mean(data[,6])
setwd("~/Documents/desafio_neoprospecta/git_repository/DesafioNeoprospecta/FrenteIV")
seq_len_comparison <- read.csv("~/Documents/desafio_neoprospecta/git_repository/DesafioNeoprospecta/FrenteIV/seq_len_comparison.csv")
View(seq_len_comparison)
seq_length<-data.frame(lib=c(1:19))
seq_len_comparison$seq<-c(1:19)
seq_length<-seq_len_comparison[,c(3,1)]
seq_length<-rbind(seq_length,seq_len_comparison[,c(3,2)])
library(ggplot2)
library(tidyr)
colnames(seq_len_comparison)
ggplot(data = seq_len_comparison %>% gather(Variable, Hours, -seq),
aes(x = seq, y = Hours, fill = Variable)) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(data = seq_len_comparison %>% gather(Trimming, Hours, -seq),
aes(x = seq, y = Length, fill = Trimming)) +
geom_bar(stat = 'identity', position = 'dodge')+
labs(y = 'Avarage length', x ='')
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming)) +
geom_bar(stat = 'identity', position = 'dodge')+
labs(y = 'Avarage length', x ='')
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming)) +
geom_bar(stat = 'identity', position = 'dodge')+
labs(y = 'Avarage length', x ='')+
theme_minimal()+
geom_hline(yintercept = 5958)
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming)) +
geom_bar(stat = 'identity', position = 'dodge')+
labs(y = 'Avarage length', x ='')+
theme_minimal()+
geom_hline(yintercept = 5958)+
geom_hline(yintercept = 3913, linetype="dashed")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming)) +
geom_bar(stat = 'identity', position = 'dodge')+
labs(y = 'Avarage length', x ='')+
theme_minimal()+
geom_hline(yintercept = 5958, color = "gray")+
geom_hline(yintercept = 3913, linetype="dashed", color = "gray")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming)) +
geom_bar(stat = 'identity', position = 'dodge')+
labs(y = 'Avarage length', x ='')+
theme_minimal()+
geom_hline(yintercept = 5958, color = "gray", show.legend = "Median Before")+
geom_hline(yintercept = 3913, linetype="dashed", color = "gray", show.legend = "Median After")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming)) +
geom_bar(stat = 'identity', position = 'dodge')+
labs(y = 'Avarage length', x ='')+
theme_minimal()+
geom_hline(yintercept = 5958, color = "gray", show.legend = TRUE)+
geom_hline(yintercept = 3913, linetype="dashed", color = "gray", show.legend = TRUE)
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(yintercept = 5958, color = "gray")+
geom_hline(yintercept = 3913, linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='')
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(yintercept = 5958, color = "gray")+
geom_hline(yintercept = 3913, linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(yintercept = 5958, color = "gray")+
geom_hline(mapping=aes(linetype="Median After"),yintercept = 3913, linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(yintercept = 5958, color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="Median After"), linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Median Before"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="Median After"), linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Median Before"), linetype="solid", color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="Median After"), linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Median Before"), linetype="solid", color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="Median After"), linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='')
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 3913, linetype="Median After"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="Median After"), linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Before"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="After"), linetype="dashed", color = "gray", show.legend = TRUE)+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Before"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="After"), linetype="dashed", color = "gray")+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Before"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="After"),  color = "gray")+
labs(y = 'Avarage length', x ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Before"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="After"),  color = "gray")+
labs(y = 'Avarage length', fill ='', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Before"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="After"),  color = "gray")+
labs(y = 'Avarage length', fill ='', x='Library', linetype="Median")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Before"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="After"),  color = "gray")+
labs(y = 'Read counts', fill ='', x='Library', linetype="Median")
png(filename = "n_read_trimming.png")
ggplot(data = seq_len_comparison %>% gather(Trimming, Length, -seq),
aes(x = seq, y = Length, fill = Trimming),show.legend = TRUE) +
geom_bar(stat = 'identity', position = 'dodge')+
theme_minimal()+
geom_hline(mapping=aes(yintercept = 5958, linetype="Before"), color = "gray")+
geom_hline(mapping=aes(yintercept = 3913, linetype="After"),  color = "gray")+
labs(y = 'Read counts', fill ='', x='Library', linetype="Median")
dev.off()
